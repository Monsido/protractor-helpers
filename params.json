{"name":"Protractor-helpers","tagline":"Set of matchers, locators, and helper functions for protractor","body":"# Protractor Helpers\r\n\r\nThis library extends Protractor API with a commonly used API. It helps write more understandable and clean tests with a well- defined separation between the test logic and the app under the test logic. It consists of four extension types: elements, helpers, locators, and matchers.\r\n\r\n## Get Started\r\n* Get protractor-helpers via **[npm](https://www.npmjs.com/)** by running `$ npm install --save-dev protractor-helpers` from your console.\r\n* Inside *protractor-conf.js*, add the following code to load the helpers:\r\n```js\r\nvar onPrepare = config.onPrepare || function () {};\r\nconfig.onPrepare = function () {\r\n  var promise = onPrepare.apply(this, arguments);\r\n  global.helpers = require('protractor-helpers');\r\n  return promise;\r\n};\r\n```\r\n\r\n## Usage\r\n### Elements\r\nThe Elements API extends `ElementArrayFinder` with:\r\n#### getByText(comparedTest:string) => ElementFinder\r\n\r\nexample (choosing a date from a calendar):\r\n```js\r\n$$('.calendar').getByText('27').click();\r\n```\r\n\r\n### Helpers\r\n`global.helpers = require('protractor-helpers')` returns helpers functions that can be used by the global helpers object.\r\n\r\n* `not` - Returns the negative value of a Promise. \r\n```js\r\nhelpers.not($('.some-element').isDisplayed());\r\n```\r\n\r\n* `translate` - Returns the translated key with translation values.\r\n```js\r\nexpect($('.some-element').getText()).toEqual(helpers.translate('SOME_TRANSLATION_KEY'));\r\n```\r\n\r\n* `safeGet` - Navigates to a URL, maximizing the window and resetting the mouse position.\r\n```js\r\nhelpers.safeGet('./SomeUrl');\r\n```\r\n\r\n* `maximizeWindow` - Maximizes the window to a given size or a default size.\r\n```js\r\nhelpers.maximizeWindow(500, 500);\r\n```\r\n\r\n* `resetPosition` - Resets the mouse position.\r\n```js\r\nhelpers.resetPosition();\r\n```\r\n\r\n* `displayHover` - Displays an element that appears only on hover state.\r\n```js\r\nhelpers.displayHover($('.some-element'));\r\n```\r\n\r\n* `waitForElement` - Waits for an element to be shown.\r\n```js\r\nhelpers.waitForElement($('.some-element'), timeout);\r\n```\r\n\r\n* `waitForElementToDisappear` - Waits for an element not to be shown.\r\n```js\r\nhelpers.waitForElementToDisappear($('.some-element'), timeout);\r\n```\r\n\r\n* `selectOptionByText` - Selects an element from a selection box.\r\n```js\r\nhelpers.selectOptionByText($('select'), 'options-to-select');\r\n```\r\n\r\n* `selectOptionByIndex` - Selects an element from a selection box.\r\n```js\r\nhelpers.selectOptionByIndex($('select'), 0);\r\n```\r\n\r\n* `selectOption` - Selects a given option.\r\n```js\r\nhelpers.selectOption($$('select option').first());\r\n```\r\n\r\n* `isFirefox` - Indicates if Firefox is the browser.\r\n```js\r\nif (helpers.isFireFox()) {\r\n  // Do FF stuff here . . .\r\n}\r\n```\r\n\r\n* `createMessage` - Creates a matchers message with `{{locator}}`, `{{not}}`, and `{{actual}}` as placeholders.\r\n```js\r\nhelpers.createMessage(this, 'Expected {{locator}}{{not}}to have image') + '.');\r\n```\r\n\r\n* `isIE` - Indicates if Internet Explorer is the browser.\r\n```js\r\nif (helpers.isIE()) {\r\n  // Do IE stuff here . . .\r\n}\r\n```\r\n\r\n* `clearAndSetValue` - Allows setting a new value to an input field (rather than appending text).\r\n```js\r\nhelpers.clearAndSetValue(inputField, 'text to populate');\r\n```\r\n\r\n* `getFilteredConsoleErrors` - Returns console error messages resulting from the test run.\r\n* ignores livereload error (since it is not loaded in CI mode), messages with warn and below severity, and a known Firefox bug (https://bugzilla.mozilla.org/show_bug.cgi?id=1127577)\r\n* Can be used in order to validate no console errors\r\n```js\r\nexpect(helpers.getFilteredConsoleErrors().length).toBe(0);\r\n```\r\n\r\n* `hasClass` - Checks whether an element has a class.\r\n```js\r\nhelpers.hasClass(element, 'class-name');\r\n```\r\n\r\n### Locators\r\nAdds two locators: `by.dataHook` and `by.dataHookAll`.\r\nSearches for element(s) with the `data-hook attribute`. For example:\r\n```html\r\n<ul>\r\n  <li data-hook=\"first\">First</li>\r\n  <li data-hook=\"second\">Second</li>\r\n</ul>\r\n```\r\n```js\r\nelement(by.dataHook('first')).click() - click on the first data hook\r\n```\r\n\r\n### Matchers\r\nThe Matchers API extends the matchers available to you:\r\n* `toBePresent` - Checks if an element is present (exists in the DOM).\r\n```js\r\nexpect($('.some-element')).toBePresent();\r\n```\r\n\r\n* `toBeDisplayed` - Checks if an element is displayed (visible in the DOM).\r\n```js\r\nexpect($('.some-element')).toBeDisplayed();\r\n```\r\n\r\n* `toHaveLengthOf` - Checks if the length passes to the function against the value it's invoked with.\r\n```js\r\nexpect($('.some-elements').count()).toHaveLengthOf(expectedLength);\r\n```\r\n\r\n* `toHaveText` - Checks if an element contains text.\r\n```js\r\nexpect($('.some-element')).toHaveText(expectedText);\r\n```\r\n\r\n* `toMatchRegex` - Checks if an element's text fits a regex.\r\n```js\r\nexpect($('.some-element')).toMatchRegex(expectedPattern);\r\n```\r\n\r\n* `toMatchMoney` - Checks if an element's text fits rtl money regex.\r\n```js\r\nexpect($('.some-element').getText()).toMatchMoney(expectedValue, currencySymbol);\r\n```\r\n\r\n* `toMatchMoneyWithFraction` - Checks if an element's text fits rtl money regex with fraction.\r\n```js\r\nexpect($('.some-element').getText()).toMatchMoneyWithFraction(expectedValue, currencySymbol);\r\n```\r\n\r\n* `toHaveValue` - Checks if an element's value attribute fits the `expectedValue`.\r\n```js\r\nexpect($('.some-element')).toHaveValue(expectedValue);\r\n```\r\n\r\n* `toHaveClass` - Checks if an element has a specific class name.\r\n```js\r\nexpect($('.some-element')).toHaveClass(className);\r\n```\r\n\r\n* `toBeDisabled` - Checks if an element is disabled.\r\n```js\r\nexpect($('.some-element')).toBeDisabled();\r\n```\r\n\r\n* `toBeChecked` - Checks if an element checkbox is checked.\r\n```js\r\nexpect($('.some-element')).toBeChecked();\r\n```\r\n\r\n* `toBeValid` - Checks if a form element is valid (using the `ng-valid` class name).\r\n```js\r\nexpect($('.some-element')).toBeValid();\r\n```\r\n\r\n* `toBeInvalid` - Checks if a form element is invalid (using the `ng-invalid` class name).\r\n```js\r\nexpect($('.some-element')).toBeInvalid();\r\n```\r\n\r\n* `toBeInvalidRequired` - Checks if a form element is invalid and required (using the `ng-invalid-required` class name).\r\n```js\r\nexpect($('.some-element')).toBeInvalidRequired();\r\n```\r\n\r\n* `toMatchTranslated` - Checks if an element contains a translation value.\r\n```js\r\nexpect($('.some-element')).toMatchTranslated(key, values);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}